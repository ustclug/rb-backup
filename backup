#!/bin/bash

set -e

readonly BASEDIR="$(readlink -f $(dirname "$0"))"
readonly PROFILE="$1"
readonly ACTION="${2:-backup}"
readonly EPOCH=$(date +%10s)
readonly ISO_TIME="$(date --date=@$EPOCH --iso-8601=seconds)"

readonly BTRFS='btrfs'
readonly RSYNC='rsync'


# log-related functions {{{
log () {
    local mesg=$1; shift
    if [ -f "$GLOBAL_LOG" ]; then
        date --iso-8601=seconds | tr -d "\n" >> $GLOBAL_LOG
        printf " ${mesg}\n" "$@" >> $GLOBAL_LOG
    fi
}

panick () {
    local mesg=$1; shift
    local str=$(printf "==> ERROR: ${mesg}\n" "$@")
    log "$str"; echo $str >&2
    exit 1
}

msg() {
    local mesg=$1; shift
    local str=$(printf "==> ${mesg}\n" "$@")
    log "$str"; echo $str
}
# }}}


# "snapshot"-related functions {{{
test_same_fs() {
    local lastdev=$(stat --printf '%d' "$1")
    shift

    for var in "$@"; do
        local dev=$(stat --printf '%d' "$var")
        [[ "$dev" != "$lastdev" ]] && return -1
        lastdev="$dev"
    done

    return 0
}

take_snapshot() {
    local src="$1"
    local dst="$2"

    if [[ "$FSTYPE" == "btrfs" ]]; then
        $BTRFS subvol snapshot -r "$src" "$dst"
    else
        mv "$src" "$dst"
    fi
}

create_subvol() {
    local path="$1"

    if [[ "$FSTYPE" == "btrfs" ]]; then
        $BTRFS subvol create "$path"
    else
        mkdir -p "$path"
    fi
}

delete_snapshot() {
    local path="$1"

    if [[ "$FSTYPE" == "btrfs" ]]; then
        $BTRFS property set -ts "${path}" ro false
        $BTRFS subvol delete "$path"
    else
        if ! test_same_fs "$SYNC_TRASHBIN" "$path"; then
            panick "$SYNC_TRASHBIN and $path are not in the same directory"
        fi

        mv "$path" "$SYNC_TRASHBIN"
        rm -rf "$SYNC_TRASHBIN"
        mkdir -p "$SYNC_TRASHBIN"
    fi
}
# }}}


parse_profile () {
    local common_conf="${BASEDIR}/common.conf"
    local profile_conf="${BASEDIR}/profiles/${PROFILE}.conf"

    declare -g -A conf

    confSRC=()
    if [ -f $profile_conf ]; then
        while read line; do
            if [[ "$line" == ?*=?* ]] && ! [[ "$line" == \#* ]]; then
                local key=${line%%=*} value=${line#*=}
                if [[ "$key" == "SRC" ]]; then
                    confSRC+=("$value")
                else
                    conf[$key]="$value"
                fi
            fi
        done < <( \
            [ -f "$common_conf" ] && cat "$common_conf"
            cat $profile_conf
        )
    else
        panick "Backup profile not found!"
    fi

    fallback_conf () {
        local key=$1 value=$2
        conf["$1"]=${conf["$1"]:-"$2"}
    }

    fallback_conf SSH_KEY "${BASEDIR}/keys/${conf[USER]}@${conf[SERVER]}"
    fallback_conf LOG_DIR "${BASEDIR}/log/${PROFILE}/"
    fallback_conf RSYNC_OPTS '-aHAX --timeout 3600 --delete'
    fallback_conf RSYNC_EXCLUDE '--exclude=/lost+found'
    fallback_conf KEEP_DAYS 30
    fallback_conf KEEP_LONG_COUNT 4
    fallback_conf USE_ISO_TIME 0


    # some shortcut global variables
    SYNC_TO="${conf[STORAGE]}/${PROFILE}"
    SYNC_CURRENT="${SYNC_TO}/current"
    SYNC_LAST="${SYNC_TO}/.lastsync"
    SYNC_TRASHBIN="${SYNC_TO}/.trashbin"
    KEEP_SECONDS="$((conf[KEEP_DAYS]*86400))"

    if [[ -n "${conf[SERVER]}" ]]; then
        RSH_OPTS="ssh -i '${conf[SSH_KEY]}'"
    else
        conf[SERVER]="PLACE_HOLDER"
        conf[SSH_KEY]="/etc/passwd"  # a dirty trick to fool existence check
        RSH_OPTS="/bin/bash $BASEDIR/dummy_rsh"
    fi

    if (( "${conf[USE_ISO_TIME]}" == 0 )); then
        TIMESTAMP=$EPOCH
        SHORT_DDL=$((EPOCH-KEEP_SECONDS))
    else
        TIMESTAMP=$ISO_TIME
        SHORT_DDL=$(date --date=@$((EPOCH-KEEP_SECONDS)) --iso-8601=seconds)
    fi

    readonly SYNC_TO SYNC_CURRENT SYNC_LAST SYNC_TRASHBIN KEEP_SECONDS \
             RSH_OPTS TIMESTAMP SHORT_DDL conf confSRC

    # check missing options
    [ -z $confSRC ] && panick "No SRC specified!"
    [ -f "${conf["SSH_KEY"]}" ] || panick "SSH key not found!"

    for key in 'SERVER' 'USER' 'STORAGE'; do
        [ -z ${conf[$key]} ] && panick "Backup profile invalid!"
    done

    return 0  # eliminate retval of test -z
}


init_log () {
    [ -d ${conf["LOG_DIR"]} ] || mkdir ${conf["LOG_DIR"]}

    readonly GLOBAL_LOG="${conf["LOG_DIR"]}/backup.log.${TIMESTAMP}"
    readonly RSYNC_LOG="${conf["LOG_DIR"]}/rsync.log.${TIMESTAMP}"

    touch "$GLOBAL_LOG"
    log "Script start at %s" "$ISO_TIME"
}


prepare_storage() {
    # detect storage filesystem type
    readonly FSTYPE=$(stat -fc "%T" "${conf[STORAGE]}")
    msg "Storage filesystem is $FSTYPE"

    # check permission of the storage
    if [[ $(stat -c "%u" "${conf[STORAGE]}") != "$(id -u)" ]]; then
        panick "Backup storage is not owned by you!"
    elif ! touch "${conf[STORAGE]}/.rb-backup"; then
        panick "Cannot create files in ${conf[STORAGE]}"
    fi

    [ -d "$SYNC_TO" ] || create_subvol "$SYNC_TO"
    [ -d "$SYNC_CURRENT" ] || create_subvol "$SYNC_CURRENT"

    if [[ "$FSTYPE" != "btrfs" ]]; then
        [ -d "$SYNC_TRASHBIN" ] || create_subvol "$SYNC_TRASHBIN"
    fi
}


rsync_wrapper () {
    local src="$1"
    local base_opts="--fake-super"
    
    if [[ "$FSTYPE" != btrfs ]] && [ -e "$SYNC_LAST" ]; then
        base_opts="$base_opts --link-dest=$SYNC_LAST"
    fi

    $RSYNC $base_opts \
           -e "$RSH_OPTS" ${conf[RSYNC_OPTS]} \
           --log-file "$RSYNC_LOG" \
           ${conf[RSYNC_EXCLUDE]} \
           "${conf[USER]}@${conf[SERVER]}:${src}" \
           "$SYNC_CURRENT"
    local ret=$?

    for stat in 0 23 24 25; do
        [[ $ret == $stat ]] && return 0
    done

    return 1
}


do_sync () {
    local success=0

    set +e
    if [[ ${#confSRC[@]} == 1 ]]; then
        rsync_wrapper "${confSRC[0]}/" && success=$((success+1))
    else
        for SRC in ${confSRC[@]}; do
            rsync_wrapper "${SRC%/}" && success=$((success+1))
        done
    fi
    set -e

    [[ $success == 0 ]] && panick "Failed to backup :("
    return 0
}


list_snap () {
    local dir="$1"
    local prefix="$2"

    find "$dir" -mindepth 1 -maxdepth 1 -type d -readable \
                -name "${prefix}*" -printf "%f\n" \
        | sort -t_ -k2 -n
}


do_snap () {
    local lastest_l_snap=$(list_snap "$SYNC_TO" L_ | tail -n1)
    lastest_l_snap=${lastest_l_snap:-"L_0000000000"}
    local old_epoch=${lastest_l_snap#L_}

    # NOTE: [[ ]] does alphabetical compare on string
    if [[ "${old_epoch}" < "${SHORT_DDL}" ]] \
            && (( ${conf[KEEP_LONG_COUNT]} > 0 )); then
        msg "Create long-live backup: %s" "L_$TIMESTAMP"
        take_snapshot "$SYNC_CURRENT" "${SYNC_TO}/L_$TIMESTAMP"
        ln -srnf "${SYNC_TO}/L_$TIMESTAMP" "$SYNC_LAST"
    else
        msg "Create short-live backup: %s" "S_$TIMESTAMP"
        take_snapshot "$SYNC_CURRENT" "${SYNC_TO}/S_$TIMESTAMP"
        ln -srnf "${SYNC_TO}/S_$TIMESTAMP" "$SYNC_LAST"
    fi
}


clean_snap () {
    # Clean long-time snapshots
    list_snap "$SYNC_TO" L_ | head -n-${conf[KEEP_LONG_COUNT]} \
    | while read subvol; do
        msg "Delete old backup ${subvol}"
        delete_snapshot "${SYNC_TO}/${subvol}"
    done

    # Clean short-time snapshots
    list_snap "$SYNC_TO" S_ \
    | while read subvol; do
        if [[ "${subvol#S_}" < "$SHORT_DDL" ]]; then
            msg "Delete old backup ${subvol}"
            delete_snapshot "${SYNC_TO}/${subvol}"
        fi
    done
}


# main {{{
[ "$(whoami)" == root ] && panick "No root please :("

parse_profile 

case "$ACTION" in
    backup)
        prepare_storage
        init_log
        do_sync
        do_snap
        clean_snap
        ;;
    list)
        echo "$SYNC_TO"
        list_snap "$SYNC_TO" "" | sed 's_^_  _'
        ;;
    *)
        panick "Unknown action: $ACTION"
esac
# }}}
